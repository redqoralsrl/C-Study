#include<iostream>

using namespace std;

int main(){
	// new 연산자
	// 
	// 어떤 데이터형을 원하는지 new 연산자에게 알려주면,
	// new 연산자는 그에 알맞은 크기의 메모리 블록을
	// 찾아내고 그 블록의 주소를 리턴한다

	//1) b와 a로 접근이 가능하다
	int a;
	int* b = &a;
	//2) 데이터 객체로 접근이 가능하다 메모리 제어권을 사용자에게 줄 수 있는 장점이다
	int* pointer = new int; // int형은 4바이트라서 4바이트의 메모리를 할당해준다

	// delete 연산자
	//
	// 사용한 메모리를 다시 메모리 풀로 환수
	// 환수된 메모리는 프로그램의 다른 부분이 다시 사용
	
	int* ps = new int;
	// 메모리 사용
	delete ps; // new를 사용하면 반드시 delete를 사용해야 누수가 없다

	// 1. new로 대입하지 않은 메모리는 delete로 해제할 수 없다
	// 2. 같은 메모리 블록을 연달아 두 번 delete로 해제할 수 없다
	// 3. new[]로 메모리를 대입할 경우 delete[]로 해제한다
	// 4. 대괄호를 사용하지 않았다면 delete도 대괄호를 사용하지 않아야 한다

	double* p3 = new double[3]; // double형 데이터 3개를 저장할 수 있는 공간을 대입한다
	p3[0] = 0.2; // p3를 배열 이름처럼 취급한다
	p3[1] = 0.5;
	p3[2] = 0.8;

	cout << "p3[1] : " << p3[1] << endl;
	
	p3 = p3 + 1; // 포인터를 증가시킨다 오른쪽의 옆주소가 해당된다

	cout << "Now p3[0] : " << p3[0] << endl;
	cout << "p3[1] : " << p3[1] << endl;
	cout << p3[2] << endl;

	p3 = p3 - 1; // 포인터를 감소시켜 왼쪽의 주소가 되서 원래 상태로 돌아온다

	delete[] p3;

	return 0;
}